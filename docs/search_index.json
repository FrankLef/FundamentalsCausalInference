[["probability.html", "Chapter 2 Conditional Probability and Expectation 2.1 Conditional Probability 2.2 Conditional Expectation and the Law of Total expectation 2.3 Estimation 2.4 Sampling Distributions and the Bootstrap 2.5 Exercises", " Chapter 2 Conditional Probability and Expectation The mortality data was given in chapter 1, section 1.2.1. data(&quot;mortality&quot;, package = &quot;fciR&quot;) dataMortality &lt;- mortality 2.1 Conditional Probability 2.1.1 Law of total probability It is important to note that \\(\\sum_i{H_i} = H\\), that is \\(H\\) can be partitioned in \\(i\\) non-overlapping partitions. Then the law of total probabilities is \\[ \\begin{align*} P(A) &amp;= \\sum_i{P(A \\cap H_i)}= \\sum_i{P(A \\mid H_i) P(H_i)} \\\\ &amp;\\text{and we condition the whole expression with B} \\\\ P(A \\mid B) &amp;= \\sum_i{P(A \\cap H_i \\mid B)}= \\sum_i{P(A \\mid B, H_i) P(B,H_i)} \\\\ \\end{align*} \\] and the multiplication rule is \\[ \\begin{align*} P(A, B \\mid C) &amp;= \\frac{P(A, B, C)}{P(C)} \\\\ &amp;= \\frac{P(A \\mid B, C) P(B, C)}{P(C)} \\\\ &amp;= \\frac{P(A \\mid B, C) P(B \\mid C) P(C)}{P(C)} \\\\ &amp;= P(A \\mid B, C) P(B \\mid C) \\end{align*} \\] 2.2 Conditional Expectation and the Law of Total expectation The function expit() used by the author is actually the same as gtools::inv.logit(), boot::inv.logit() or stats::plogis(). In this project we use stats::plogis() because it is in base R and we want to minimize dependencies. 2.3 Estimation Using the What-if example we have \\[ \\begin{align*} X_i \\beta &amp;= X_{i,1} \\beta_i +\\ldots+X_{i, p}\\beta_p \\\\ &amp;\\therefore \\\\ X_i \\beta &amp;= \\beta_1 A_i + \\beta_2 T_i + \\beta_3 H_i \\\\ \\end{align*} \\] and \\[ X_i^T(Y_i - X_i \\beta) \\\\ \\therefore \\\\ \\begin{bmatrix} 1 \\cdot(Y_i - \\beta_1 - A_i \\beta_2 - T_i \\beta_3 - H_i \\beta_4) \\\\ A_i \\cdot(Y_i - \\beta_1 - A_i \\beta_2 - T_i \\beta_3 - H_i \\beta_4) \\\\ T_i \\cdot(Y_i - \\beta_1 - A_i \\beta_2 - T_i \\beta_3 - H_i \\beta_4)\\\\ H_i \\cdot(Y_i - \\beta_1 - A_i \\beta_2 - T_i \\beta_3 - H_i \\beta_4) \\end{bmatrix} \\] 2.4 Sampling Distributions and the Bootstrap The sim() function in section 2.4, p. 31 is coded in fciR::sim_intervals() and its alias fciR::sim(). Run and verify with authors results on p. 32 d &lt;- sim(nsim = 500, n = 500) stopifnot(abs(d$bad - 0.8374) &lt; 0.03, abs(d$good - 0.948) &lt; 0.03) d ## $bad ## [1] 0.836 ## ## $good ## [1] 0.966 and lmodboot() is fciR::boot_lmod() with the alias fciR::lmodboot() Run and verify against the authors results on p.34 d &lt;- fciR::lmodboot(whatifdat, R = 500) d ## name est conf lci uci ## 1 P 0.6059581 0.95 0.4109247 0.758819 # check results with book stopifnot(abs(d[&quot;est&quot;] - 0.60596) &lt; 0.02, abs(d[&quot;lci&quot;] - 0.41638) &lt; 0.02, abs(d[&quot;uci&quot;] - 0.76823) &lt; 0.02) 2.5 Exercises The exercises are located in a separate project. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
